name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DEV_URL: share2teach-api.run.app    # Replace with your actual development domain
  PROD_URL: api.share2teach.com       # Replace with your actual production domain
  REGION: us-central1
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Clean and reinstall dependencies
        run: |
          rm -rf node_modules
          npm install

      - name: Fix permissions for node modules
        run: sudo chmod -R 755 node_modules

      - name: Rebuild bcrypt from source
        run: |
          npm install -g node-gyp
          npm rebuild bcrypt --build-from-source

      - name: Install jest
        run: npm install --save-dev jest

      - name: Set Jest permissions
        run: chmod +x node_modules/.bin/jest

      - name: Run tests
        env:
          AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
          AZURE_CONTAINER_NAME: ${{ secrets.AZURE_CONTAINER_NAME }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
        run: npm test

      - name: Build Docker image
        run: |
          docker build -t docker.io/sosokwani/share2teach-backend:latest -f docker/Dockerfile .

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image to Docker Hub
        run: docker push docker.io/sosokwani/share2teach-backend:latest

  deploy-development:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Install Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Deploy to Google Cloud Run (Development)
        id: deploy-dev
        run: |
          gcloud run deploy share2teach-backend-dev \
          --image docker.io/sosokwani/share2teach-backend:latest \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --project ${{ env.PROJECT_ID }} \
          --set-env-vars "AZURE_STORAGE_CONNECTION_STRING=${{ secrets.AZURE_STORAGE_CONNECTION_STRING }},AZURE_CONTAINER_NAME=${{ secrets.AZURE_CONTAINER_NAME }},DB_HOST=${{ secrets.DB_HOST }},DB_USER=${{ secrets.DB_USER }},DB_PASSWORD=${{ secrets.DB_PASSWORD }},DB_NAME=${{ secrets.DB_NAME }},JWT_SECRET=${{ secrets.JWT_SECRET }},EMAIL_USER=${{ secrets.EMAIL_USER }},EMAIL_PASS=${{ secrets.EMAIL_PASS }},GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }},GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }},SESSION_SECRET=${{ secrets.SESSION_SECRET }}"

      - name: Output Development Information
        run: |
          echo "::notice title=Development Deployment::üöÄ Deployment successful!"
          echo "::notice::üì± API is now available at: https://${{ env.DEV_URL }}"
          echo "::notice::üîç Swagger docs: https://${{ env.DEV_URL }}/api-docs"

  approve-deployment:
    needs: deploy-development
    runs-on: ubuntu-latest
    steps:
      - name: Approval Notice
        run: |
          echo "::notice title=Production Approval Required::‚ö†Ô∏è Deployment to production requires manual approval"
          echo "::notice::üëâ Trigger the production deployment workflow manually when ready"

  deploy-production:
    runs-on: ubuntu-latest
    needs: approve-deployment
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Install Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Deploy to Google Cloud Run (Production)
        id: deploy-prod
        run: |
          gcloud run deploy share2teach-backend-prod \
          --image docker.io/sosokwani/share2teach-backend:latest \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --project ${{ env.PROJECT_ID }} \
          --set-env-vars "AZURE_STORAGE_CONNECTION_STRING=${{ secrets.AZURE_STORAGE_CONNECTION_STRING }},AZURE_CONTAINER_NAME=${{ secrets.AZURE_CONTAINER_NAME }},DB_HOST=${{ secrets.DB_HOST }},DB_USER=${{ secrets.DB_USER }},DB_PASSWORD=${{ secrets.DB_PASSWORD }},DB_NAME=${{ secrets.DB_NAME }},JWT_SECRET=${{ secrets.JWT_SECRET }},EMAIL_USER=${{ secrets.EMAIL_USER }},EMAIL_PASS=${{ secrets.EMAIL_PASS }},GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }},GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }},SESSION_SECRET=${{ secrets.SESSION_SECRET }}"

      - name: Output Production Information
        run: |
          echo "::notice title=Production Deployment::üöÄ Deployment successful!"
          echo "::notice::üåê Production API is now live at: https://${{ env.PROD_URL }}"
          echo "::notice::üìö API Documentation: https://${{ env.PROD_URL }}/api-docs"