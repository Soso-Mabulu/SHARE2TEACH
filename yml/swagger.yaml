openapi: 3.0.0
info:
  title: Share-2-Teach API
  description: This is the backend API for the Share-2-Teach application. It allows users to upload, share, and view documents.
  version: 1.0.0
  servers:
    - url: "{scheme}://{host}:{port}/"
      description: Default Server URL
      variables:
        scheme:
          default: "http"
          enum:
            - "http"
            - "https"
        host:
          default: "localhost"
        port:
          default: "3000"
paths:
  /api/v1/auth/signup:
    post:
      summary: Register a new user
      tags:
        - Authentication
      description: Creates a new user account with the provided information.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  description: The user's first name.
                  example: "John"
                userLName:
                  type: string
                  description: The user's last name.
                  example: "Doe"
                email:
                  type: string
                  description: The user's email address.
                  example: "john.doe@example.com"
                password:
                  type: string
                  description: The user's password.
                  example: "password123"
              required:
                - userName
                - userLName
                - email
                - password
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully"
        "400":
          description: Bad request, invalid data
        "409":
          description: Conflict, email already exists

  /api/v1/auth/login:
    post:
      summary: Sign in a user
      tags:
        - Authentication
      description: Authenticates a user and returns a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email address.
                  example: "john.doe@example.com"
                password:
                  type: string
                  description: The user's password.
                  example: "password123"
              required:
                - email
                - password
      responses:
        "200":
          description: User authenticated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: The JWT token for authentication.
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  message:
                    type: string
                    example: "User signed in successfully"
        "401":
          description: Unauthorized, invalid credentials
  
  /api/v1/auth/password-reset-request:
    post:
      summary: Request a password reset
      tags:
        - Authentication
      description: Sends a password reset email to the user. The user will receive a link to reset their password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email address.
                  example: "john.doe@example.com"
              required:
                - email
      responses:
        "200":
          description: Password reset email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset email sent"
        "400":
          description: Bad request, invalid email
        "404":
          description: Email not found

  /api/v1/auth/reset-password:
    post:
      summary: Reset password
      tags:
        - Authentication
      description: Resets the user's password using a token sent to their email. The user needs to provide a new password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: The password reset token sent to the user's email.
                  example: "abcdef1234567890"
                newPassword:
                  type: string
                  description: The new password for the user.
                  example: "newpassword123"
              required:
                - token
                - newPassword
      responses:
        "200":
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password has been reset successfully"
        "400":
          description: Bad request, invalid token or password
        "404":
          description: Token or user not found
        "500":
          description: Internal server error

  /api/v1/auth/logout:
    post:
      summary: Logout a user
      tags:
        - Authentication
      description: Logs out a user by blacklisting the provided JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: The JWT token to be blacklisted.
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              required:
                - token
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"
        "400":
          description: Bad request, no token provided
        "403":
          description: Forbidden, token has been invalidated

  /api/v1/users:
    get:
      summary: Retrieve a list of all users
      tags:
        - Users
      description: Fetches all registered users. Requires admin role.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: User ID
                    userName:
                      type: string
                      description: User's first name
                    userLName:
                      type: string
                      description: User's last name
                    email:
                      type: string
                      description: User email
                    userType:
                      type: string
                      description: User role
                  example:
                    - id: 1
                      userName: "John"
                      userLName: "Doe"
                      email: "john.doe@example.com"
                      userType: "admin"
        "401":
          description: Unauthorized, no or invalid token
        "403":
          description: Forbidden, insufficient privileges

  /api/v1/users/update:
    put:
      summary: Update own user details
      tags:
        - Users
      description: Updates user details (excluding password) for the authenticated user.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  example: "Jane"
                  description: User's first name
                userLName:
                  type: string
                  example: "Smith"
                  description: User's last name
                email:
                  type: string
                  example: "jane.smith@example.com"
                  description: User email
      responses:
        "200":
          description: User details updated successfully
        "400":
          description: No fields to update provided
        "404":
          description: User not found
        "500":
          description: Internal server error

  /api/v1/users/{userId}:
    get:
      summary: Retrieve user details by userId
      tags:
        - Users
      description: Fetches user details for the specified userId. Requires authentication.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            example: "12345"
          description: The ID of the user whose details are being requested.
      responses:
        "200":
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: User ID
                  userName:
                    type: string
                    description: User's first name
                  userLName:
                    type: string
                    description: User's last name
                  email:
                    type: string
                    description: User email
                  userType:
                    type: string
                    description: User role
                example:
                  id: 12345
                  userName: "Jane"
                  userLName: "Smith"
                  email: "jane.smith@example.com"
                  userType: "public"
        "404":
          description: User not found
        "500":
          description: Internal server error

    put:
      summary: Update user type
      tags:
        - Users
      description: Updates the user type (role) of a specific user. Requires admin role.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            example: "12345"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userType:
                  type: string
                  enum: [moderator, admin, public]
                  example: "moderator"
                  description: The new role for the user.
      responses:
        "200":
          description: User type updated successfully
        "400":
          description: Invalid userId or userType provided
        "404":
          description: User not found
        "500":
          description: Internal server error

    delete:
      summary: Delete a user
      tags:
        - Users
      description: Deletes a specific user by userId. Requires admin role.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            example: "12345"
      responses:
        "200":
          description: User deleted successfully
        "404":
          description: User not found
        "500":
          description: Internal server error

          
  /api/v1/upload:
    post:
      summary: Upload a document
      tags:
        - Documents
      description: Allows educators, moderators, and admins to upload documents. The file is uploaded and converted to PDF if necessary, and the metadata is extracted.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: The files to upload. Supported formats: PDF, DOCX, XLSX, PPTX.
                title:
                  type: string
                  description: The title of the document.
                  example: "Introduction to Cloud Computing"
                module:
                  type: string
                  description: The module associated with the document.
                  example: "CMPG321"
                description:
                  type: string
                  description: A brief description of the document.
                  example: "Lecture notes on cloud computing."
                university:
                  type: string
                  description: The university associated with the document.
                  example: "Example University"
                category:
                  type: string
                  description: The category of the document.
                  example: "Lecture Notes"
                academicYear:
                  type: string
                  description: The academic year for the document.
                  example: "2023"
      responses:
        "200":
          description: Document uploaded successfully and marked as pending.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        url:
                          type: string
                          example: "https://share2teach.blob.core.windows.net/documents/lecture_notes.pdf"
        "400":
          description: Bad request, no files uploaded or invalid data.
        "403":
          description: Forbidden, insufficient privileges.
        "500":
          description: Internal server error.

  /api/v1/documents:
    get:
      summary: Get all documents
      description: Retrieve a list of all documents based on the user's role.
      tags:
        - Documents
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of documents.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  documents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Document'
        '404':
          description: No documents found.
        '500':
          description: Failed to retrieve documents.
 

  /api/v1/documents/pending:
    get:
      summary: Get pending documents
      description: Retrieve a list of all pending documents.
      tags:
        - Documents
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of pending documents.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  documents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Document'
        '404':
          description: No pending documents found.
        '500':
          description: Failed to retrieve pending documents.

  /api/v1/documents/reported:
    get:
      summary: Get reported documents
      description: Retrieve a list of all reported documents.
      tags:
        - Documents
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of reported documents.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  documents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Document'
        '404':
          description: No reported documents found.
        '500':
          description: Failed to retrieve reported documents.

  /api/v1/documents/approved:
    get:
      summary: Get approved documents
      description: Retrieve a list of all approved documents.
      tags:
        - Documents
      responses:
        '200':
          description: A list of approved documents.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  documents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Document'
        '404':
          description: No approved documents found.
        '500':
          description: Failed to retrieve approved documents.

  /api/v1/documents/denied:
    get:
      summary: Get denied documents
      description: Retrieve a list of all denied documents.
      tags:
        - Documents
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of denied documents.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  documents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Document'
        '404':
          description: No denied documents found.
        '500':
          description: Failed to retrieve denied documents.

  /api/v1/documents/{docId}:
      get:
        summary: Get document by ID
        description: Retrieve a document by its ID.
        tags:
          - Documents
        parameters:
          - in: path
            name: docId
            required: true
            schema:
              type: string
              example: "12345"
        security:
          - bearerAuth: []
        responses:
          "200":
            description: Document successfully retrieved.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                      example: success
                    document:
                      $ref: '#/components/schemas/Document'
          '404':
            description: Document not found.
          '500':
            description: Failed to retrieve document.
      delete:
        summary: Delete a document by ID
        description: Delete a specific document based on its ID. This action will remove the document from all related tables.
        tags:
          - Documents
        parameters:
          - in: path
            name: docId
            required: true
            schema:
              type: string
              example: "12345"
        security:
          - bearerAuth: []
        responses:
          '200':
            description: Document deleted successfully.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                      example: success
                    message:
                      type: string
                      example: Document deleted successfully.
          '404':
            description: Document not found or already deleted.
          '500':
            description: Failed to delete document.

  /api/v1/documents/search:
    get:
      summary: Search documents
      description: Search for documents based on a single search term. Token required for access.
      tags:
        - Documents
      parameters:
        - in: query
          name: search
          required: true
          schema:
            type: string
            example: "CMPG321"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Search results.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Document'
        '400':
          description: Bad request, invalid query.
        '401':
          description: Unauthorized, valid token required.
        '404':
          description: No documents found matching the search term.
        '500':
          description: Failed to perform search.

  /api/v1/report:
    post:
      summary: Report a file
      description: Endpoint to report a file by providing the document ID, user ID, and report details. The system will determine the severity of the report based on how many times the document has been reported.
      tags:
        - File Reporting
      security:
        - bearerAuth: []  # Indicates that this endpoint requires bearer token authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                docId:
                  type: integer
                  example: 123
                  description: The document ID being reported.
                userId:
                  type: integer
                  example: 456
                  description: The user ID of the person reporting the document.
                reporting_details:
                  type: string
                  example: Inappropriate content
                  description: Details of the report.
      responses:
        '200':
          description: File reported successfully. The document's status may be updated if it reaches the severity threshold.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: File reported successfully.
        '400':
          description: Invalid input. The document ID may not exist, or the user has already reported this document.
        '404':
          description: Document not found in approved documents.
        '401':
          description: Unauthorized. No or invalid token provided.
        '500':
          description: Server error. Failed to report file due to an internal error.


  
  /api/v1/ratings:
    post:
      summary: Rate a file
      description: "Endpoint to rate a file by providing file ID and rating."
      tags:
        - File Rating
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                docId:
                  type: integer
                  example: 123
                  description: "The document ID being rated."
                userId:
                  type: integer
                  example: 36
                  description: "The ID of the user that wants to rate the document."
                rating:
                  type: integer
                  example: 4
                  description: "The rating given to the document (0-5)."
      responses:
        "200":
          description: Rating added successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Rating added successfully."
        "400":
          description: |
            Invalid input. Possible reasons:
            - Rating must be between 0 and 5.
            - Document not found.
            - Rating already exists for the same document.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid input. Rating must be between 0 and 5."
        "403":
          description: |
            Forbidden. Only educators, moderators, and public users can rate documents.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You do not have permission to rate this document."
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Database error: Unable to add rating."

    get:
      summary: Get all ratings
      description: "Endpoint to retrieve all ratings, authorized for admins."
      tags:
        - File Rating
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of all ratings.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    docId:
                      type: integer
                      example: 123
                      description: "The document ID."
                    rating:
                      type: integer
                      example: 4
                      description: "The rating given to the document."
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Database error: Unable to fetch ratings."

    delete:
      summary: Delete a rating
      description: "Delete a user's rating for a document. This operation is accessible only by public users."
      tags:
        - File Rating
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - docId
                - userId
              properties:
                docId:
                  type: integer
                  example: 101
                  description: "The ID of the document for which the rating is being deleted."
                userId:
                  type: integer
                  example: 37
                  description: "The user that wants to delete the rating."
      responses:
        "204":
          description: "Rating deleted successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Rating deleted successfully."
        "404":
          description: "Rating not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Rating not found"
        "500":
          description: "Server error."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Database error: Unable to delete rating."

    put:
      summary: Update a rating
      description: "Update a user's rating for a document. This operation is accessible only by public users."
      tags:
        - File Rating
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - docId
                - userId
                - rating
              properties:
                docId:
                  type: integer
                  example: 101
                  description: "The ID of the document for which the rating is being updated."
                userId:
                  type: integer
                  example: 37
                  description: "The ID of the user that wants to update the rating."
                rating:
                  type: integer
                  example: 4
                  description: "The updated rating value, which must be between 0 and 5."
      responses:
        "200":
          description: "Rating updated successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Rating updated successfully"
        "400":
          description: "Bad request or validation error (e.g., invalid rating)."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Rating must be between 0 and 5"
        "404":
          description: "Rating not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Rating not found"
        "500":
          description: "Server error."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Database error: Unable to update rating."

  /api/v1/moderation:
    post:
      summary: Moderate a document
      description: |
        Allows a moderator to approve or deny a document. If approved, the document is moved to the `APPROVED_DOCUMENT` table; if denied, it is moved to the `DENIED_DOCUMENT` table. 
        Once a document is denied, it cannot be approved again. Similarly, once a document is approved, it cannot be disapproved. Requires moderator role.
      tags:
        - Moderation
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                docid:
                  type: integer
                  description: The ID of the document to be moderated.
                  example: 1
                action:
                  type: string
                  enum: [approve, disapprove]
                  description: |
                    The action to be taken on the document. `approve` moves the document to `APPROVED_DOCUMENT`, 
                    while `disapprove` moves it to `DENIED_DOCUMENT`.
                  example: "disapprove"
                comments:
                  type: string
                  description: |
                    An optional comment regarding the moderation decision. **Required if the action is `disapprove`.**
                  example: "Document does not meet the required standards."
              required:
                - docid
                - action
      responses:
        '200':
          description: Document moderated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Document approved successfully."
        '400':
          description: Bad request, invalid input, or action cannot be completed due to the current document status.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "This document has already been approved and cannot be disapproved."
        '404':
          description: Document not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Document not found."
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Failed to moderate document."
                  error:
                    type: string
                    example: "Database error or other failure reason."

  /api/v1/faq/:
    get:
      summary: Get all FAQs
      description: "Retrieve all FAQs, accessible by both public access users and admins."
      tags:
        - FAQ
      responses:
        "200":
          description: A list of all FAQs.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    faqId:
                      type: integer
                      example: 1
                      description: "The FAQ ID."
                    question:
                      type: string
                      example: "What is Share2Teach?"
                      description: "The FAQ question."
                    answer:
                      type: string
                      example: "Share2Teach is a platform for sharing educational resources."
                      description: "The FAQ answer."
        "500":
          description: Server error.

  /api/v1/faq/search:
    get:
      summary: Search FAQs
      description: "Search FAQs by a term in the question or answer. Accessible by both public access users and admins."
      tags:
        - FAQ
      parameters:
        - in: query
          name: term
          required: true
          schema:
            type: string
            example: "Share2Teach"
          description: "The search term."
      responses:
        "200":
          description: A list of FAQs matching the search term.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    faqId:
                      type: integer
                      example: 1
                      description: "The FAQ ID."
                    question:
                      type: string
                      example: "What is Share2Teach?"
                      description: "The FAQ question."
                    answer:
                      type: string
                      example: "Share2Teach is a platform for sharing educational resources."
                      description: "The FAQ answer."
        "500":
          description: Server error.


  /api/v1/faq/{faqId}:
    put:
      summary: Update an FAQ
      description: "Update an FAQ by its ID. This operation is accessible only by admins."
      tags:
        - FAQ
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: faqId
          required: true
          schema:
            type: integer
            example: 1
          description: "The ID of the FAQ to update."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - question
                - answer
              properties:
                question:
                  type: string
                  example: "What is Share2Teach?"
                  description: "The updated FAQ question."
                answer:
                  type: string
                  example: "Share2Teach is a platform for sharing educational resources."
                  description: "The updated FAQ answer."
      responses:
        "200":
          description: FAQ updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  faqId:
                    type: integer
                    example: 1
                    description: "The FAQ ID."
                  question:
                    type: string
                    example: "What is Share2Teach?"
                    description: "The updated FAQ question."
                  answer:
                    type: string
                    example: "Share2Teach is a platform for sharing educational resources."
                    description: "The updated FAQ answer."
        "404":
          description: "FAQ not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "FAQ not found"
        "400":
          description: "Invalid faqId or request body."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Validation failed for parameter 'faqId'. Invalid number."
        "500":
          description: "Server error."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Database error: Unable to update FAQ."

    delete:
      summary: Delete an FAQ
      description: "Delete an FAQ by its ID. This operation is accessible only by admins."
      tags:
        - FAQ
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: faqId
          required: true
          schema:
            type: integer
            example: 1
          description: "The ID of the FAQ to delete."
      responses:
        "204":
          description: "FAQ deleted successfully. No content is returned."
        "404":
          description: "FAQ not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "FAQ not found"
        "500":
          description: "Server error."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Database error: Unable to delete FAQ.."


  /api/v1/faq/newfaq:
    post:
      summary: Create a new FAQ
      description: "Create a new FAQ. This operation is accessible only by admins."
      tags:
        - FAQ
      security:
        - bearerAuth: []
      requestBody:
        description: "Data needed to create a new FAQ."
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - question
                - answer
              properties:
                question:
                  type: string
                  example: "What is Share2Teach?"
                  description: "The FAQ question."
                answer:
                  type: string
                  example: "Share2Teach is a platform for sharing educational resources."
                  description: "The FAQ answer."
      responses:
        "201":
          description: "FAQ created successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  faqId:
                    type: integer
                    example: 1
                    description: "The ID of the newly created FAQ."
                  question:
                    type: string
                    example: "What is Share2Teach?"
                    description: "The question of the newly created FAQ."
                  answer:
                    type: string
                    example: "Share2Teach is a platform for sharing educational resources."
                    description: "The answer of the newly created FAQ."
        "400":
          description: Bad request. Validation error or missing required fields.
        "500":
          description: Internal server error.

  /api/v1/faq/rating/{faqId}:
    post:
      summary: Rate an FAQ
      description: "Rate an FAQ by providing the FAQ ID and rating. Accessible by public access users."
      tags:
        - FAQ
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: faqId
          required: true
          schema:
            type: integer
            example: 1
          description: "The ID of the FAQ to rate."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: integer
                  example: 4
                  minimum: 0
                  maximum: 5
                  description: "The rating given to the FAQ (0-5)."
      responses:
        "200":
          description: Rating submitted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Rating submitted successfully."
        "400":
          description: "Invalid input or rating already exists. Rating must be between 0 and 5."
        "404":
          description: "FAQ not found."
        "500":
          description: "Server error."

    # Existing paths omitted for brevity

    /api/v1/analytics/approved-documents:
      get:
        summary: Get total number of approved documents
        tags:
          - Analytics
        security:
          - bearerAuth: []
        description: Returns the count of approved documents.
        responses:
          "200":
            description: Approved documents count
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    approved_count:
                      type: integer
                      example: 120

  /api/v1/analytics/denied-documents:
    get:
      summary: Get total number of denied documents
      tags:
        - Analytics
      security:
        - bearerAuth: []
      description: Returns the count of denied documents.
      responses:
        "200":
          description: Denied documents count
          content:
            application/json:
              schema:
                type: object
                properties:
                  denied_count:
                    type: integer
                    example: 45

  /api/v1/analytics/reported-documents:
    get:
      summary: Get total number of reported documents
      tags:
        - Analytics
      security:
        - bearerAuth: []
      description: Returns the count of reported documents.
      responses:
        "200":
          description: Reported documents count
          content:
            application/json:
              schema:
                type: object
                properties:
                  reported_count:
                    type: integer
                    example: 10

  /api/v1/analytics/pending-documents:
    get:
      summary: Get total number of pending documents
      tags:
        - Analytics
      security:
        - bearerAuth: []
      description: Returns the count of pending documents.
      responses:
        "200":
          description: Pending documents count
          content:
            application/json:
              schema:
                type: object
                properties:
                  pending_count:
                    type: integer
                    example: 80

  /api/v1/analytics/total-users:
    get:
      summary: Get total number of users
      tags:
        - Analytics
      security:
        - bearerAuth: []
      description: Returns the total number of registered users.
      responses:
        "200":
          description: Total user count
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_count:
                    type: integer
                    example: 300

  /api/v1/analytics/active-users:
    get:
      summary: Get total number of active users
      tags:
        - Analytics
      security:
        - bearerAuth: []
      description: Returns the number of active users in the last 30 days.
      responses:
        "200":
          description: Active user count
          content:
            application/json:
              schema:
                type: object
                properties:
                  active_users:
                    type: integer
                    example: 150

  /api/v1/analytics/user-signups:
    get:
      summary: Get number of user signups for a time period
      tags:
        - Analytics
      security:
        - bearerAuth: []
      description: Returns the number of new user signups within a specified time range.
      parameters:
        - in: query
          name: start_date
          schema:
            type: string
            format: date
            example: "2024-01-01"
          required: true
          description: Start date for the time range.
        - in: query
          name: end_date
          schema:
            type: string
            format: date
            example: "2024-12-31"
          required: true
          description: End date for the time range.
      responses:
        "200":
          description: User signups count
          content:
            application/json:
              schema:
                type: object
                properties:
                  signups:
                    type: integer
                    example: 40

  /api/v1/analytics/ratings-per-time-period:
    get:
      summary: Get average ratings over a time period
      tags:
        - Analytics
      security:
        - bearerAuth: []
      description: Returns the average rating and the total number of ratings within a time period.
      parameters:
        - in: query
          name: start_date
          schema:
            type: string
            format: date
            example: "2024-01-01"
          required: true
          description: Start date for the time range.
        - in: query
          name: end_date
          schema:
            type: string
            format: date
            example: "2024-12-31"
          required: true
          description: End date for the time range.
      responses:
        "200":
          description: Ratings metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  average_rating:
                    type: number
                    format: float
                    example: 4.5
                  total_ratings:
                    type: integer
                    example: 50

  /api/v1/analytics/uploaded-documents:
    get:
      summary: Get uploaded documents in a time period
      tags:
        - Analytics
      security:
        - bearerAuth: []
      description: Returns the total number of uploaded documents within a specified time period.
      parameters:
        - in: query
          name: start_date
          schema:
            type: string
            format: date
            example: "2024-01-01"
          required: true
          description: Start date for the time range.
        - in: query
          name: end_date
          schema:
            type: string
            format: date
            example: "2024-12-31"
          required: true
          description: End date for the time range.
      responses:
        "200":
          description: Uploaded documents count
          content:
            application/json:
              schema:
                type: object
                properties:
                  uploaded_docs:
                    type: integer
                    example: 30
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Document:
      type: object
      properties:
        docId:
          type: integer
          example: 123
        module:
          type: string
          example: Mathematics
        description:
          type: string
          example: "An introduction to algebra"
        location:
          type: string
          example: "Room 101"
        university:
          type: string
          example: "University of Example"
        category:
          type: string
          example: "Math"
        academicYear:
          type: string
          example: "2023/2024"
        documentUserId:
          type: integer
          example: 567
        fileName:
          type: string
          example: "algebra_101.pdf"
        fileType:
          type: string
          example: "pdf"
        fileSize:
          type: string
          example: "2MB"
        pageCount:
          type: integer
          example: 45
        author:
          type: string
          example: "John Doe"
        creationDate:
          type: string
          format: date-time
          example: "2023-05-12T08:40:00Z"
        modificationDate:
          type: string
          format: date-time
          example: "2023-06-01T08:40:00Z"
        documentStatus:
          type: string
          example: "approved"
        datetime_of_approval:
          type: string
          format: date-time
          example: "2023-06-02T09:00:00Z"
        datetime_of_denial:
          type: string
          format: date-time
          example: "2023-06-03T09:00:00Z"
        reporterUserId:
          type: integer
          example: 789
        report_details:
          type: string
          example: "Inappropriate content"
        report_timestamp:
          type: string
          format: date-time
          example: "2023-06-01T10:15:00Z"
