openapi: 3.0.0
info:
  title: Share-2-Teach API
  description: This is the backend API for the Share-2-Teach application. It allows users to upload, share, and view documents.
  version: 1.0.0
  servers:
    - url: "{scheme}://{host}:{port}/"
      description: Default Server URL
      variables:
        scheme:
          default: "http"
          enum:
            - "http"
            - "https"
        host:
          default: "localhost"
        port:
          default: "3000"
paths:
  /api/v1/signup:
    post:
      summary: Register a new user
      tags:
        - Authentication
      description: Creates a new user account with the provided information.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  description: The user's first name.
                  example: "John"
                userLName:
                  type: string
                  description: The user's last name.
                  example: "Doe"
                email:
                  type: string
                  description: The user's email address.
                  example: "john.doe@example.com"
                password:
                  type: string
                  description: The user's password.
                  example: "password123"
              required:
                - userName
                - userLName
                - email
                - password
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully"
        "400":
          description: Bad request, invalid data
        "409":
          description: Conflict, email already exists

  /api/v1/signin:
    post:
      summary: Sign in a user
      tags:
        - Authentication
      description: Authenticates a user and returns a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email address.
                  example: "john.doe@example.com"
                password:
                  type: string
                  description: The user's password.
                  example: "password123"
              required:
                - email
                - password
      responses:
        "200":
          description: User authenticated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: The JWT token for authentication.
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  message:
                    type: string
                    example: "User signed in successfully"
        "401":
          description: Unauthorized, invalid credentials

  /api/v1/password-reset/password-reset-request:
    post:
      summary: Request a password reset
      tags:
        - Authentication
      description: Sends a password reset email to the user. The user will receive a link to reset their password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email address.
                  example: "john.doe@example.com"
              required:
                - email
      responses:
        "200":
          description: Password reset email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset email sent"
        "400":
          description: Bad request, invalid email
        "404":
          description: Email not found

  /api/v1/password-reset/reset-password:
    post:
      summary: Reset password
      tags:
        - Authentication
      description: Resets the user's password using a token sent to their email. The user needs to provide a new password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: The password reset token sent to the user's email.
                  example: "abcdef1234567890"
                newPassword:
                  type: string
                  description: The new password for the user.
                  example: "newpassword123"
              required:
                - token
                - newPassword
      responses:
        "200":
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password has been reset successfully"
        "400":
          description: Bad request, invalid token or password
        "404":
          description: Token or user not found
        "500":
          description: Internal server error

  /api/v1/users:
    get:
      summary: Retrieve a list of all users
      tags:
        - Users
      description: Fetches all registered users. Requires admin role.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: User ID
                    username:
                      type: string
                      description: Username
                    email:
                      type: string
                      description: User email
                    role:
                      type: string
                      description: User role
                  example:
                    - id: 1
                      username: "John"
                      email: "john.doe@example.com"
                      role: "admin"
        "401":
          description: Unauthorized, no or invalid token
        "403":
          description: Forbidden, insufficient privileges

  /api/v1/users/{userId}:
    put:
      summary: Update user type
      tags:
        - Users
      description: Updates the user type (role) of a specific user.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            example: "12345"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userType:
                  type: string
                  enum: [moderator, admin, public]
                  example: "moderator"
                  description: The new role for the user.
      responses:
        "200":
          description: User type updated successfully
        "400":
          description: Invalid userId or userType provided
        "404":
          description: User not found
        "500":
          description: Internal server error

  /api/v1/upload:
    post:
      summary: Upload a document
      tags:
        - Documents
      description: Allows educators, moderators, and admins to upload documents. The file is uploaded to Azure Blob Storage, and the metadata is stored in the database. User ID is extracted from the JWT.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: The files to upload. Only PDF files are allowed.
                module:
                  type: string
                  description: The module associated with the document.
                  example: "CMPG321"
                description:
                  type: string
                  description: A brief description of the document.
                  example: "Lecture notes on cloud computing."
                university:
                  type: string
                  description: The university associated with the document.
                  example: "Example University"
                category:
                  type: string
                  description: The category of the document.
                  example: "Lecture Notes"
                academicYear:
                  type: string
                  description: The academic year for the document.
                  example: "2023"
      responses:
        "200":
          description: Document uploaded successfully and marked as pending.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        url:
                          type: string
                          example: "https://share2teach.blob.core.windows.net/documents/lecture_notes.pdf"
        "400":
          description: Bad request, no files uploaded or invalid data.
        "403":
          description: Forbidden, insufficient privileges.
        "500":
          description: Internal server error.

  /api/v1/search:
    get:
      summary: "Search Documents"
      description: "Retrieve documents based on search criteria such as module, description, university, category, or academic year. Public users can only view approved documents, while moderators and admins can search for documents of any status."
      tags:
        - "Documents"
      parameters:
        - name: search
          in: query
          description: "Search term to filter documents by module, description, university, category, or academic year."
          required: false
          schema:
            type: string
      security:
        - bearerAuth: [] # Ensures JWT is provided for authentication
      responses:
        "200":
          description: "Successful response with a list of documents matching the search criteria."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    docId:
                      type: integer
                      example: 1
                    module:
                      type: string
                      example: "Computer Science"
                    description:
                      type: string
                      example: "Introduction to Programming"
                    status:
                      type: string
                      example: "approved"
                    location:
                      type: string
                      example: "https://example.com/docs/1"
                    university:
                      type: string
                      example: "North-West University"
                    category:
                      type: string
                      example: "Lecture Notes"
                    academicYear:
                      type: string
                      example: "2024"
                    userId:
                      type: string
                      example: "user123"
        "403":
          description: "Forbidden: Insufficient privileges to access documents."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Forbidden: Insufficient privileges."
        "404":
          description: "No documents found matching the search criteria."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No documents found matching the search criteria."
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal Server Error"
                  error:
                    type: string
                    example: "Error message details"

  /api/v1/documents/pending:
    get:
      summary: "Get Pending Documents"
      description: "Retrieve a list of documents with a status of 'pending'."
      tags:
        - "Documents"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Successful response with a list of pending documents."
          schema:
            type: "object"
            properties:
              status:
                type: "string"
                example: "success"
              documents:
                type: "array"
                items:
                  type: "object"
                  properties:
                    docId:
                      type: "integer"
                      example: 1
                    module:
                      type: "string"
                      example: "Computer Science"
                    description:
                      type: "string"
                      example: "Introduction to Programming"
                    location:
                      type: "string"
                      example: "https://example.com/docs/1"
                    university:
                      type: "string"
                      example: "North-West University"
                    category:
                      type: "string"
                      example: "Lecture Notes"
                    academicYear:
                      type: "string"
                      example: "2024"
                    userId:
                      type: "string"
                      example: "user123"
        "404":
          description: "No pending documents found."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "No pending documents found."
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Internal Server Error"
                  error:
                    type: "string"
                    example: "Error message details"

  /api/v1/documents/{docId}:
    post:
      summary: Moderate a document (approve or deny)
      description: "Allows a moderator to approve or deny a document. When approved, the document is moved to the APPROVED_DOCUMENT table. When denied, it's moved to the DENIED_DOCUMENT table."
      tags:
        - Documents
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: docId
          required: true
          schema:
            type: integer
            example: 1
          description: "The ID of the document to be moderated."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [approve, deny]
                  example: approve
                  description: "Action to be taken on the document."
      responses:
        "200":
          description: Document successfully moderated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Document successfully approved."
        "400":
          description: Invalid action or missing parameters.
        "404":
          description: Document not found or already moderated.
        "500":
          description: Internal server error.

  /fileRating/rate:
    post:
      summary: Rate a document
      tags:
        - Ratings
      description: Allows a user to rate a document.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                docId:
                  type: integer
                  description: The ID of the document.
                  example: 1
                userId:
                  type: integer
                  description: The ID of the user.
                  example: 123
                rating:
                  type: integer
                  description: Rating value (0-5).
                  example: 4
              required:
                - docId
                - userId
                - rating
      responses:
        '200':
          description: Rating added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Rating added successfully."
        "400":
          description: Invalid input or rating already exists.
        "500":
          description: Server error.

    get:
      summary: Get all ratings
      description: "Endpoint to retrieve all ratings, authorized for admins."
      tags:
        - File Rating
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of all ratings.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    docId:
                      type: integer
                      example: 123
                      description: "The document ID."
                    userId:
                      type: integer
                      example: 456
                      description: "The user ID."
                    rating:
                      type: integer
                      example: 4
                      description: "The rating given to the document."
        "500":
          description: Server error.

  /api/v1/faq/:
    get:
      summary: Get all FAQs
      description: "Retrieve all FAQs, accessible by both public access users and admins."
      tags:
        - FAQ
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of all FAQs.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    faqId:
                      type: integer
                      example: 1
                      description: "The FAQ ID."
                    question:
                      type: string
                      example: "What is Share2Teach?"
                      description: "The FAQ question."
                    answer:
                      type: string
                      example: "Share2Teach is a platform for sharing educational resources."
                      description: "The FAQ answer."
        "500":
          description: Server error.

  /api/v1/faq/search:
    get:
      summary: Search FAQs
      description: "Search FAQs by a term in the question or answer. Accessible by both public access users and admins."
      tags:
        - FAQ
      parameters:
        - in: query
          name: term
          required: true
          schema:
            type: string
            example: "Share2Teach"
          description: "The search term."
      responses:
        "200":
          description: A list of FAQs matching the search term.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    faqId:
                      type: integer
                      example: 1
                      description: "The FAQ ID."
                    question:
                      type: string
                      example: "What is Share2Teach?"
                      description: "The FAQ question."
                    answer:
                      type: string
                      example: "Share2Teach is a platform for sharing educational resources."
                      description: "The FAQ answer."
        "500":
          description: Server error.


  /api/v1/faq/update/faqId:
    put:
      summary: Update an FAQ
      description: "Update an FAQ by its ID. This operation is accessible only by admins."
      tags:
        - FAQ
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: faqId
          required: true
          schema:
            type: integer
            example: 1
          description: "The ID of the FAQ to update."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - question
                - answer
              properties:
                question:
                  type: string
                  example: "What is Share2Teach?"
                  description: "The updated FAQ question."
                answer:
                  type: string
                  example: "Share2Teach is a platform for sharing educational resources."
                  description: "The updated FAQ answer."
      responses:
        "200":
          description: FAQ updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  faqId:
                    type: integer
                    example: 1
                    description: "The FAQ ID."
                  question:
                    type: string
                    example: "What is Share2Teach?"
                    description: "The updated FAQ question."
                  answer:
                    type: string
                    example: "Share2Teach is a platform for sharing educational resources."
                    description: "The updated FAQ answer."
        "404":
          description: FAQ not found.
        "500":
          description: Server error.

  /api/v1/faq/delete/faqId:
    delete:
      summary: Delete an FAQ
      description: "Delete an FAQ by its ID. This operation is accessible only by admins."
      tags:
        - FAQ
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: faqId
          required: true
          schema:
            type: integer
            example: 1
          description: "The ID of the FAQ to delete."
      responses:
        "204":
          description: FAQ deleted successfully. No content is returned.
        "404":
          description: FAQ not found.
        "500":
          description: Server error.

  /api/v1/faq/newfaq:
    post:
      summary: Create a new FAQ
      description: "Create a new FAQ. This operation is accessible only by admins."
      tags:
        - FAQ
      security:
        - bearerAuth: []
      requestBody:
        description: "Data needed to create a new FAQ."
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - question
                - answer
              properties:
                question:
                  type: string
                  example: "What is Share2Teach?"
                  description: "The FAQ question."
                answer:
                  type: string
                  example: "Share2Teach is a platform for sharing educational resources."
                  description: "The FAQ answer."
      responses:
        "201":
          description: "FAQ created successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  faqId:
                    type: integer
                    example: 1
                    description: "The ID of the newly created FAQ."
                  question:
                    type: string
                    example: "What is Share2Teach?"
                    description: "The question of the newly created FAQ."
                  answer:
                    type: string
                    example: "Share2Teach is a platform for sharing educational resources."
                    description: "The answer of the newly created FAQ."
        "400":
          description: Bad request. Validation error or missing required fields.
        "500":
          description: Internal server error.

  /api/v1/faq/rating/faqId:
    post:
      summary: Rate an FAQ
      description: "Rate an FAQ by providing the FAQ ID, user ID, and rating. Accessible by public access users."
      tags:
        - FAQ
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: faqId
          required: true
          schema:
            type: integer
            example: 1
          description: "The ID of the FAQ to rate."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  example: 456
                  description: "The user ID rating the FAQ."
                rating:
                  type: integer
                  example: 4
                  minimum: 0
                  maximum: 5
                  description: "The rating given to the FAQ (0-5)."
      responses:
        "200":
          description: Rating submitted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Rating submitted successfully."
        "400":
          description: "Invalid input or rating already exists. Rating must be between 0 and 5."
        "404":
          description: "FAQ or user not found."
        "500":
          description: "Server error."

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
