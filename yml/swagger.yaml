openapi: 3.0.0
info:
  title: Share-2-Teach API
  description: This is the backend API for the Share-2-Teach application. It allows users to upload, share, and view documents.
  version: 1.0.0
  servers:
    - url: "{scheme}://{host}:{port}/"
      description: Default Server URL
      variables:
        scheme:
          default: "http"
          enum:
            - "http"
            - "https"
        host:
          default: "localhost"
        port:
          default: "3000"
paths:
  /api/v1/auth/signup:
    post:
      summary: Register a new user
      tags:
        - Authentication
      description: Creates a new user account with the provided information.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  description: The user's first name.
                  example: "John"
                userLName:
                  type: string
                  description: The user's last name.
                  example: "Doe"
                email:
                  type: string
                  description: The user's email address.
                  example: "john.doe@example.com"
                password:
                  type: string
                  description: The user's password.
                  example: "password123"
              required:
                - userName
                - userLName
                - email
                - password
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully"
        '400':
          description: Bad request, invalid data
        '409':
          description: Conflict, email already exists

  /api/v1/auth/login:
    post:
      summary: Sign in a user
      tags:
        - Authentication
      description: Authenticates a user and returns a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email address.
                  example: "john.doe@example.com"
                password:
                  type: string
                  description: The user's password.
                  example: "password123"
              required:
                - email
                - password
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: The JWT token for authentication.
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  message:
                    type: string
                    example: "User signed in successfully"
        '401':
          description: Unauthorized, invalid credentials
  
  /api/v1/auth/password-reset-request:
    post:
      summary: Request a password reset
      tags:
        - Authentication
      description: Sends a password reset email to the user. The user will receive a link to reset their password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email address.
                  example: "john.doe@example.com"
              required:
                - email
      responses:
        '200':
          description: Password reset email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset email sent"
        '400':
          description: Bad request, invalid email
        '404':
          description: Email not found

  /api/v1/auth/reset-password:
    post:
      summary: Reset password
      tags:
        - Authentication
      description: Resets the user's password using a token sent to their email. The user needs to provide a new password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: The password reset token sent to the user's email.
                  example: "abcdef1234567890"
                newPassword:
                  type: string
                  description: The new password for the user.
                  example: "newpassword123"
              required:
                - token
                - newPassword
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password has been reset successfully"
        '400':
          description: Bad request, invalid token or password
        '404':
          description: Token or user not found
        '500':
          description: Internal server error

  /api/v1/users:
    get:
      summary: Retrieve a list of all users
      tags:
        - Users
      description: Fetches all registered users. Requires admin role.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: User ID
                    username:
                      type: string
                      description: Username
                    email:
                      type: string
                      description: User email
                    role:
                      type: string
                      description: User role
                  example:
                    - id: 1
                      username: "John"
                      email: "john.doe@example.com"
                      role: "admin"
        '401':
          description: Unauthorized, no or invalid token
        '403':
          description: Forbidden, insufficient privileges

  /api/v1/users/{userId}:
    put:
      summary: Update user type
      tags:
        - Users
      description: Updates the user type (role) of a specific user.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            example: "12345"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userType:
                  type: string
                  enum: [moderator, admin, public]
                  example: "moderator"
                  description: The new role for the user.
      responses:
        '200':
          description: User type updated successfully
        '400':
          description: Invalid userId or userType provided
        '404':
          description: User not found
        '500':
          description: Internal server error

  /api/v1/upload:
    post:
      summary: Upload a document
      tags:
        - Documents
      description: Allows educators, moderators, and admins to upload documents. The file is uploaded to Azure Blob Storage, and the metadata is stored in the database. User ID is extracted from the JWT.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: The files to upload. Only PDF files are allowed.
                module:
                  type: string
                  description: The module associated with the document.
                  example: "CMPG321"
                description:
                  type: string
                  description: A brief description of the document.
                  example: "Lecture notes on cloud computing."
                university:
                  type: string
                  description: The university associated with the document.
                  example: "Example University"
                category:
                  type: string
                  description: The category of the document.
                  example: "Lecture Notes"
                academicYear:
                  type: string
                  description: The academic year for the document.
                  example: "2023"
      responses:
        '200':
          description: Document uploaded successfully and marked as pending.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        url:
                          type: string
                          example: "https://share2teach.blob.core.windows.net/documents/lecture_notes.pdf"
        '400':
          description: Bad request, no files uploaded or invalid data.
        '403':
          description: Forbidden, insufficient privileges.
        '500':
          description: Internal server error.

  /api/v1/documents:
    get:
      summary: Get all documents
      description: Retrieve a list of all documents based on the user's role.
      tags:
        - Documents
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of documents.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  documents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Document'
        '404':
          description: No documents found.
        '500':
          description: Failed to retrieve documents.

  /api/v1/documents/pending:
    get:
      summary: Get pending documents
      description: Retrieve a list of all pending documents.
      tags:
        - Documents
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of pending documents.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  documents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Document'
        '404':
          description: No pending documents found.
        '500':
          description: Failed to retrieve pending documents.

  /api/v1/documents/reported:
    get:
      summary: Get reported documents
      description: Retrieve a list of all reported documents.
      tags:
        - Documents
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of reported documents.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  documents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Document'
        '404':
          description: No reported documents found.
        '500':
          description: Failed to retrieve reported documents.

  /api/v1/documents/approved:
    get:
      summary: Get approved documents
      description: Retrieve a list of all approved documents.
      tags:
        - Documents
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of approved documents.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  documents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Document'
        '404':
          description: No approved documents found.
        '500':
          description: Failed to retrieve approved documents.

  /api/v1/documents/denied:
    get:
      summary: Get denied documents
      description: Retrieve a list of all denied documents.
      tags:
        - Documents
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of denied documents.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  documents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Document'
        '404':
          description: No denied documents found.
        '500':
          description: Failed to retrieve denied documents.

  /api/v1/documents/{docId}:
    get:
      summary: Get document by ID
      description: Retrieve a document by its ID.
      tags:
        - Documents
      parameters:
        - in: path
          name: docId
          required: true
          schema:
            type: string
            example: "12345"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Document details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  document:
                    $ref: '#/components/schemas/Document'
        '404':
          description: Document not found.
        '500':
          description: Failed to retrieve document.

  /api/v1/documents/{docId}/approve:
    post:
      summary: Approve a document
      description: Approve a pending document. Requires admin or moderator role.
      tags:
        - Documents
      parameters:
        - in: path
          name: docId
          required: true
          schema:
            type: string
            example: "12345"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Document approved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Document approved successfully
        '400':
          description: Bad request, invalid document ID.
        '403':
          description: Forbidden, insufficient privileges.
        '404':
          description: Document not found.
        '500':
          description: Failed to approve document.

  /api/v1/documents/{docId}/deny:
    post:
      summary: Deny a document
      description: Deny a pending document. Requires admin or moderator role.
      tags:
        - Documents
      parameters:
        - in: path
          name: docId
          required: true
          schema:
            type: string
            example: "12345"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Document denied successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Document denied successfully
        '400':
          description: Bad request, invalid document ID.
        '403':
          description: Forbidden, insufficient privileges.
        '404':
          description: Document not found.
        '500':
          description: Failed to deny document.

  /api/v1/search:
    get:
      summary: Search documents
      description: Search for documents based on a single search term. Accessible to all users.
      tags:
        - Documents
      parameters:
        - in: query
          name: query
          required: true
          schema:
            type: string
            example: "cloud computing"
      responses:
        '200':
          description: Search results.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Document'
        '400':
          description: Bad request, invalid query.
        '500':
          description: Failed to perform search.

  /api/v1/report:
    post:
      tags:
        - "File Reporting"
      summary: "Report a file"
      description: "Endpoint to report a file by providing file ID, user ID, and report details."
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "File report details"
          required: true
          schema:
            type: "object"
            properties:
              docId:
                type: "integer"
                example: 123
                description: "The document ID being reported."
              userId:
                type: "integer"
                example: 456
                description: "The user ID reporting the document."
              report_details:
                type: "string"
                example: "Inappropriate content"
                description: "Details of the report."
      responses:
        200:
          description: "File reported successfully."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "File reported successfully."
        400:
          description: "Invalid input."
        500:
          description: "Server error."

  /api/v1/moderation:
      post:
        summary: Moderate a document
        description: Allows a moderator to approve or deny a document. If approved, the document is moved to the APPROVED_DOCUMENT table; if denied, it is moved to the DENIED_DOCUMENT table. Requires moderator role.
        tags:
          - Moderation
        security:
          - bearerAuth: []
        parameters:
          - in: path
            name: docid
            required: true
            schema:
              type: integer
              example: 1
            description: The ID of the document to be moderated.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  action:
                    type: string
                    enum: [approve, deny]
                    description: The action to be taken on the document.
                    example: "approve"
                  comment:
                    type: string
                    description: An optional comment regarding the moderation decision.
                    example: "Document meets all the requirements."
                required:
                  - action
        responses:
          '200':
            description: Document moderated successfully.
          '400':
            description: Bad request, invalid action or docid.
          '403':
            description: Forbidden, insufficient privileges.
          '404':
            description: Document not found.
          '500':
            description: Internal server error.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Document:
      type: object
      properties:
        docId:
          type: integer
          example: 123
        module:
          type: string
          example: Mathematics
        description:
          type: string
          example: "An introduction to algebra"
        location:
          type: string
          example: "Room 101"
        university:
          type: string
          example: "University of Example"
        category:
          type: string
          example: "Math"
        academicYear:
          type: string
          example: "2023/2024"
        documentUserId:
          type: integer
          example: 567
        fileName:
          type: string
          example: "algebra_101.pdf"
        fileType:
          type: string
          example: "pdf"
        fileSize:
          type: string
          example: "2MB"
        pageCount:
          type: integer
          example: 45
        author:
          type: string
          example: "John Doe"
        creationDate:
          type: string
          format: date-time
          example: "2023-05-12T08:40:00Z"
        modificationDate:
          type: string
          format: date-time
          example: "2023-06-01T08:40:00Z"
        documentStatus:
          type: string
          example: "approved"
        datetime_of_approval:
          type: string
          format: date-time
          example: "2023-06-02T09:00:00Z"
        datetime_of_denial:
          type: string
          format: date-time
          example: "2023-06-03T09:00:00Z"
        reporterUserId:
          type: integer
          example: 789
        report_details:
          type: string
          example: "Inappropriate content"
        report_timestamp:
          type: string
          format: date-time
          example: "2023-06-01T10:15:00Z"
